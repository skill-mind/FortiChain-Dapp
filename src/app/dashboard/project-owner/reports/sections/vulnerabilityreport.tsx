"use client";
import React, { useState, useMemo } from "react";
import { reports, ReportData } from "../data";
import ProjectOwnerReportCard from "@/app/dashboard/components/reports/ProjectOwnerReportCard";
import CloseProjectModal from "@/app/dashboard/components/report/CloseProjectModal";
import ProjectClosedSuccessModal from "@/app/dashboard/components/report/ProjectClosedSuccessModal";
import { ArrowLeft } from "lucide-react";
import { motion } from "framer-motion";
import {
  backButtonVariants,
  metadataContainerVariants,
  metadataItemVariants,
  headerVariants,
  gridContainerVariants,
  cardVariants
  } from "../animations";

interface Props {
  reportIndex: number | null;
  setCurrentView: (view: number) => void;
  setReportIndex: (index: number | null) => void;
  setVulnerabilityIndex: (index: number | null) => void;
}

const mainContainerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      when: "beforeChildren",
      staggerChildren: 0.1,
    },
  },
};





const VulnerabilityReport: React.FC<Props> = ({ setCurrentView, setVulnerabilityIndex }) => {
  const [selectedLanguages, setSelectedLanguages] = useState<string[]>([]);
  const [selectedSeverity, setSelectedSeverity] = useState<ReportData["severity"][]>([]);
  const [selectedResearcher, setSelectedResearcher] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState<string>("");

  // Modal states
  const [isCloseModalOpen, setIsCloseModalOpen] = useState(false);
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [closingNote, setClosingNote] = useState<string>("");

  const handleViewDetails = (index: number) => {
    setVulnerabilityIndex(index);
    setCurrentView(2);
  };

  const handleBackToReports = () => {
    setCurrentView(0);
  };

  const handleCloseProject = () => {
    setIsCloseModalOpen(true);
  };

  const handleConfirmClose = async (note?: string) => {
    await new Promise(resolve => setTimeout(resolve, 1000));

    setClosingNote(note || "");
    setIsCloseModalOpen(false);
    setIsSuccessModalOpen(true);
  };

  const handleModalClose = () => {
    setIsCloseModalOpen(false);
  };

  const handleSuccessModalClose = () => {
    setIsSuccessModalOpen(false);
    setCurrentView(0);
  };

  const handleMoreDetails = () => {
    setCurrentView(2);
  };

  const filteredReports = useMemo(() => {
    return reports.filter((report) => {
      const matchesSearch = report.title.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesSeverity =
        selectedSeverity.length === 0 || selectedSeverity.includes(report.severity);
      const matchesResearcher =
        selectedResearcher.length === 0 || selectedResearcher.includes(report.researcher);
      const matchesLanguage =
        selectedLanguages.length === 0 ||
        (report.language && report.language.some((lang) => selectedLanguages.includes(lang)));
      return matchesSearch && matchesSeverity && matchesResearcher && matchesLanguage;
    });
  }, [searchQuery, selectedSeverity, selectedResearcher, selectedLanguages]);

  // Group reports by severity for section headings
  const groupedBySeverity = useMemo(() => {
    const critical = filteredReports.filter((r) => r.severity === "Critical");
    const high = filteredReports.filter((r) => r.severity === "High");
    const medium = filteredReports.filter((r) => r.severity === "Medium");
    const low = filteredReports.filter((r) => r.severity === "Low");

    return { critical, high, medium, low };
  }, [filteredReports]);

  // Calculate project statistics
  const totalVulnerabilities = reports.length;
  const totalBountyPaid = reports
    .filter(r => r.status === "Validated")
    .reduce((sum, report) => sum + (report.score || 0), 0);
  const bountyAllocated = reports.reduce((sum, report) => sum + (report.score || 0), 0);

  return (
    <>
      <motion.div
        className="min-h-screen bg-black text-white p-6"
        variants={mainContainerVariants}
        initial="hidden"
        animate="visible"
      >
        {/* Project Header */}
        <motion.div
          variants={headerVariants}
          className="bg-[#161113] rounded-lg p-6 mb-8 border border-[#464043]"
        >
          <motion.button
            variants={backButtonVariants}
            onClick={handleBackToReports}
            className="text-white mb-4 flex items-center hover:text-white transition-colors"
          >
            <ArrowLeft className="w-5 h-5 mr-1.5" /> Back to Reports
          </motion.button>

          <h1 className="text-2xl font-bold mb-6 text-white">SkillNet Vulnerability Report</h1>

          <motion.div
            variants={metadataContainerVariants}
            className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
            <motion.div
              variants={metadataItemVariants}>
              <p className="text-white font-semibold mb-1">Project Status</p>
              <p className="text-white text-sm font-light">Ongoing</p>
            </motion.div>
            <motion.div
              variants={metadataItemVariants}>
              <p className="text-white font-semibold mb-1">Vulnerabilities Found</p>
              <p className="text-white text-sm font-light ">{totalVulnerabilities}</p>
            </motion.div>
            <motion.div
              variants={metadataItemVariants}>
              <p className="text-white font-semibold mb-1">Total Bounty Paid</p>
              <p className="text-white text-sm font-light">${totalBountyPaid.toLocaleString()}</p>
            </motion.div>
            <motion.div
              variants={metadataItemVariants}>
              <p className="text-white font-semibold mb-1">Bounty Allocated</p>
              <p className="text-white text-sm font-light">${bountyAllocated.toLocaleString()}</p>
            </motion.div>
            <motion.div
              variants={metadataItemVariants}>
              <p className="text-white font-semibold mb-1">Expiry Date</p>
              <p className="text-white text-sm font-light">23/05/2024</p>
            </motion.div>
          </motion.div>

          <div className="flex gap-4">
            <button
              onClick={handleMoreDetails}
              className="bg-white hover:bg-[#5a5459] text-black px-6 py-2 rounded-lg transition-colors"
            >
              More Details
            </button>
            <button
              onClick={handleCloseProject}
              className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors"
            >
              Close Project
            </button>
          </div>
        </motion.div>

        {/* Vulnerability Reports with Severity Headings */}
        <motion.div
          variants={gridContainerVariants}
          initial="hidden"
          animate="visible"
          className="space-y-8"
        >
          {/* Critical Section */}
          {groupedBySeverity.critical.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-4 text-white">Critical</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedBySeverity.critical.map((report, index) => (
                  <motion.div
                    key={`${report.id}-critical-${index}`}
                    variants={cardVariants}
                  >
                    <ProjectOwnerReportCard
                      report={report}
                      onClick={() => handleViewDetails(reports.indexOf(report))}
                    />
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* High Section */}
          {groupedBySeverity.high.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-4 text-white">High</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedBySeverity.high.map((report, index) => (
                  <motion.div
                    key={`${report.id}-high-${index}`}
                    variants={cardVariants}
                  >
                    <ProjectOwnerReportCard
                      report={report}
                      onClick={() => handleViewDetails(reports.indexOf(report))}
                    />
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* Medium Section */}
          {groupedBySeverity.medium.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-4 text-white">Medium</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedBySeverity.medium.map((report, index) => (
                  <motion.div
                    key={`${report.id}-medium-${index}`}
                    variants={cardVariants}
                  >
                    <ProjectOwnerReportCard
                      report={report}
                      onClick={() => handleViewDetails(reports.indexOf(report))}
                    />
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {/* Low Section */}
          {groupedBySeverity.low.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-4 text-white">Low</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedBySeverity.low.map((report, index) => (
                  <motion.div
                    key={`${report.id}-low-${index}`}
                    variants={cardVariants}
                  >
                    <ProjectOwnerReportCard
                      report={report}
                      onClick={() => handleViewDetails(reports.indexOf(report))}
                    />
                  </motion.div>
                ))}
              </div>
            </div>
          )}
        </motion.div>
      </motion.div>

      {/* Modals */}
      <CloseProjectModal
        isOpen={isCloseModalOpen}
        onClose={handleModalClose}
        onConfirm={handleConfirmClose}
        projectName="SkillNet"
        vulnerabilitiesFound={totalVulnerabilities}
        totalBountyPaid={totalBountyPaid}
      />

      <ProjectClosedSuccessModal
        isOpen={isSuccessModalOpen}
        onClose={handleSuccessModalClose}
        projectName="SkillNet"
        closingNote={closingNote}
      />
    </>
  );
};

export default VulnerabilityReport;